{"version":3,"sources":["components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Wrap","styled","div","UlContainer","ul","ToDoComponent","getLocalStorageArray","useState","toDoListLocal","setToDoListLocal","inputValueRef","useRef","n","Date","getTime","deleteTask","e","parentID","target","parentNode","id","findTaskNumberID","findIndex","x","date","test","splice","completedTask","status","editTask","newValue","clickTarget","itemTask","previousSibling","contentEditable","classList","add","focus","innerHTML","remove","item","useEffect","localStorage","setItem","JSON","stringify","className","type","ref","name","placeholder","onClick","inputValue","current","value","oldArray","map","defaultChecked","suppressContentEditableWarning","App","getLocalArray","getItem","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8871a84e.chunk.js","sourcesContent":["import {useState, useRef, useEffect} from \"react\";\r\nimport styled from 'styled-components';\r\nimport { FaRegEdit, FaRegTrashAlt } from 'react-icons/fa';\r\n\r\n\r\nconst Wrap = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tjustify-content: flex-start;\r\n\talign-content: center;\r\n\tpadding: 50px 10px;\r\n\t.inner {\r\n\t\tbackdrop-filter: blur(5px);\r\n\t\tmax-width: 450px;\r\n\t\twidth: 100%;\r\n\t\tpadding: 15px;\r\n\t\tbackground-color: rgba(0,0,0,0.5);;\r\n\t\tborder: 1px solid rgba(0,0,0,0.5);;\r\n\t\tbox-shadow: 0px 0px 10px 0px #000000;\r\n        border-radius: 10px;\r\n        \r\n        form {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-content: flex-end;\r\n\r\n            input[type=text] {\r\n                width: calc(100% - 33px);\r\n                appearance: none;\r\n                border: none;\r\n                background-color: transparent;\r\n                border-bottom: 1px solid white;\r\n                margin: 0;\r\n                font-size: 23px;\r\n                border-radius: 0;\r\n                outline: none;\r\n                padding: 5px 5px 0px 5px;\r\n                color: white;\r\n                &::placeholder {\r\n                    color: white;\r\n                }\r\n                &:-webkit-autofill,\r\n                &:-webkit-autofill:hover,\r\n                &:-webkit-autofill:focus,\r\n                &:-webkit-autofill:active {\r\n                    transition: background-color 5000s ease-in-out 0s;\r\n                    -webkit-text-fill-color: #fff !important;\r\n                }\r\n                &:-webkit-autofill::first-line {\r\n                    font-size: 23px !important;\r\n                }\r\n\r\n                &:focus {\r\n                    outline: none;\r\n                }\r\n            }\r\n\r\n\r\n            .btn {\r\n                appearance: none;\r\n                font-size: 23px;\r\n                margin: 0;\r\n                padding: 0;\r\n                border: none;\r\n                cursor: pointer;\r\n                text-align: center;\r\n                &.btn-primary {\r\n                    background-color: white;\r\n                    color: #5d5d5d;\r\n                    width: 33px;\r\n                    transition: color 0.2s ease-in-out;\r\n                    &:hover {\r\n                        color:#333333;\r\n                    }\r\n                }\r\n                &:focus {\r\n                    outline: none;\r\n                }\r\n            }\r\n        }\r\n\t}\r\n`\r\n\r\n\r\nconst UlContainer = styled.ul`\r\n    padding: 10px 5px;\r\n    margin: 0;\r\n    list-style: none;\r\n    position: relative;\r\n    .error {\r\n        font-size: 11px;\r\n        position: absolute;\r\n        top: 5px;\r\n        left: 5px;\r\n        display: none;\r\n        &.open {\r\n            display: block;\r\n        }\r\n    }\r\n.item {\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 10px 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    box-shadow: 0px 0px 5px -1px #000000;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n\r\n    input[type=checkbox] {\r\n        appearance: none;\r\n        width: 20px;\r\n        height: 20px;\r\n        background: transparent;\r\n        border-radius: 50%;\r\n        margin: 0;\r\n        border: 1px solid white;\r\n        opacity: 0.5;\r\n        &:focus {\r\n            border: 1px solid white;\r\n            outline: 0;\r\n        }\r\n        &:checked {\r\n            background: white;\r\n        }\r\n    }\r\n    li {\r\n        width: 78%;\r\n        font-size: 16px;\r\n        word-break: break-all;\r\n        &.editable {\r\n            border-bottom: 1px solid white;\r\n        }\r\n        &:focus {\r\n            outline: 0;\r\n            border-bottom: 1px solid white;\r\n        }\r\n        &.completed {\r\n            text-decoration: line-through;\r\n            color: #eee3;\r\n            transition: color 0.3s ease-in-out;\r\n            + .edit {\r\n                pointer-events: none;\r\n                color: #eee3;\r\n                transition: color 0.3s ease-in-out;\r\n            }\r\n        }\r\n    }\r\n    .edit,\r\n    .trash {\r\n        transition: all 0.3s ease-in-out;\r\n        svg {\r\n            pointer-events: none;\r\n        }\r\n    }\r\n}\r\n`\r\n\r\n\r\n\r\n\r\n\r\nexport default function ToDoComponent({getLocalStorageArray}) {\r\n    const [toDoListLocal, setToDoListLocal] = useState([...getLocalStorageArray]);\r\n    const inputValueRef = useRef();\r\n\r\n    //create a unique number for each task\r\n    let d = new Date();\r\n    let n = d.getTime();\r\n\r\n\r\n    //refresh local storage\r\n    useEffect(() => {\r\n        localStorage.setItem('myData', JSON.stringify(toDoListLocal));\r\n    }, [toDoListLocal])\r\n\r\n\r\n    //add item to list function\r\n    function addItemToList() {\r\n        const inputValue = inputValueRef.current.value;\r\n        if (inputValue !== '') {\r\n            setToDoListLocal(oldArray => [{item: `${inputValue}`, status: \"uncompleted\", date: `${n}` }, ...oldArray]);\r\n            inputValueRef.current.value = '';\r\n        }\r\n    }\r\n\r\n\r\n    //delete Task\r\n    function deleteTask(e) {\r\n        let clickTarget = e.target;\r\n        let parentID = clickTarget.parentNode.id;\r\n        let findTaskNumberID = toDoListLocal.findIndex(x => x.date === parentID);\r\n\r\n        //very important use 'set' function to update the array\r\n        let test = [...toDoListLocal]\r\n        test.splice(findTaskNumberID, 1)\r\n        setToDoListLocal(test)\r\n\r\n    }\r\n\r\n    //completed task Task\r\n    function completedTask(e) {\r\n        let clickTarget = e.target;\r\n        let parentID = clickTarget.parentNode.id;\r\n        let findTaskNumberID = toDoListLocal.findIndex(x => x.date === parentID);\r\n        let test = [...toDoListLocal]\r\n\r\n        if(test[findTaskNumberID].status === 'uncompleted') {\r\n            test[findTaskNumberID].status = 'completed';\r\n        } else {\r\n            test[findTaskNumberID].status = 'uncompleted';\r\n        }\r\n        setToDoListLocal(test)\r\n\r\n    }\r\n\r\n\r\n    //Edit Task\r\n    //HAVE TO DOUBLE CHECK THE FUNCTIONALITY OF THIS FUNCTION\r\n    function editTask(e) {\r\n        let clickTarget = e.target;\r\n        let itemTask = clickTarget.previousSibling;\r\n        let parentID = clickTarget.parentNode.id;\r\n        let findTaskNumberID = toDoListLocal.findIndex(x => x.date === parentID);\r\n        let test = [...toDoListLocal];\r\n        let newValue;\r\n\r\n        if (itemTask.contentEditable === 'false') {\r\n            itemTask.contentEditable = true;\r\n            itemTask.classList.add('editable');\r\n            itemTask.focus();\r\n        } else if (itemTask.contentEditable === 'true'){\r\n            itemTask.contentEditable = false;\r\n            newValue= itemTask.innerHTML;\r\n            itemTask.classList.remove('editable');\r\n\r\n            test[findTaskNumberID].item = newValue;\r\n            setToDoListLocal(test);\r\n        }\r\n    } \r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Wrap>\r\n                <div className='inner'>\r\n                    <form>\r\n                        <input type=\"text\" ref={inputValueRef} name=\"toDo\" placeholder=\"Add new task\"/>\r\n                        <button onClick={addItemToList} className=\"add-btn btn btn-primary\" type=\"button\">+</button>\r\n                    </form>\r\n\r\n                    <UlContainer className=\"to-do-list\">\r\n                        <span className=\"error\">*Please fill the text box above.</span>\r\n                    {\r\n                        toDoListLocal?.map((item) => (\r\n                            <div className=\"item\" key={item.date} id={item.date}>\r\n\r\n                                {item.status === 'completed'\r\n                                ? <input type=\"checkbox\" onClick={completedTask} defaultChecked></input>\r\n                                : <input type=\"checkbox\" onClick={completedTask}></input>}\r\n\r\n                                <li className={item.status} id={item.item} contentEditable='false' suppressContentEditableWarning={true}>{item.item}</li>\r\n                                <span onClick={editTask} className=\"edit\">\r\n                                    <FaRegEdit/>\r\n                                </span>\r\n                                <span onClick={deleteTask} className=\"trash\">\r\n                                    <FaRegTrashAlt/>\r\n                                </span>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    </UlContainer>\r\n                </div>\r\n            </Wrap>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './components/Todo';\r\n\r\nimport ToDoComponent from './components/Todo';\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n  let getLocalArray;\r\n\r\n  if (localStorage.getItem(\"myData\") === null) {\r\n    getLocalArray = []\r\n  } else {\r\n    getLocalArray = JSON.parse(localStorage.getItem('myData'));\r\n  }\r\n\r\n\r\n  return (\r\n  <>\r\n    <ToDoComponent getLocalStorageArray={getLocalArray}/>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}